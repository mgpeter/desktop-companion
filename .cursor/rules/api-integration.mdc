---
description: 
globs: 
alwaysApply: true
---
---
description: API Integration Rules
globs: *.cs,*.json
---
# API Integration Rules

Rules for maintaining API integration standards in ServoSkull.NET.

<rule>
name: api_integration
description: Enforces API integration and service standards
filters:
  - type: file_extension
    pattern: "\\.(cs|json)$"
  - type: content
    pattern: "HttpClient|OpenAI|API|endpoint|IClient|IService"
  - type: event
    pattern: "file_create|file_modify"

actions:
  - type: reject
    conditions:
      - pattern: "new HttpClient\\(\\)"
        message: "Use IHttpClientFactory for HTTP clients"
      - pattern: "apiKey = \"[^\"]+\""
        message: "Use proper configuration for API keys"
      - pattern: "await httpClient\\.GetAsync"
        message: "Use typed API clients instead of raw HTTP calls"
      - pattern: "ServoSkull\\.Core.*class.*Client"
        message: "Client implementations should be in ServoSkull.Integration.{Provider} project"
      - pattern: "namespace.*\\.Interfaces"
        message: "Use Abstractions namespace instead of Interfaces"

  - type: suggest
    message: |
      API Integration Standards:

      1. Project Organization:
         ```
         ServoSkull.Core/
         ├── Abstractions/
         │   ├── Services/              # Service abstractions
         │   │   ├── IWhisperService.cs
         │   │   └── ITTSService.cs
         │   └── Clients/               # Client abstractions
         │       ├── IOpenAIClient.cs
         │       └── IVisionClient.cs
         └── Models/
             └── Api/                   # API DTOs and requests
         
         ServoSkull.Integration.OpenAI/  # OpenAI-specific implementations
         ├── Services/
         │   ├── WhisperService.cs
         │   └── TTSService.cs
         ├── Clients/
         │   └── OpenAIClient.cs
         └── DependencyInjection.cs     # Extension methods for DI

         ServoSkull.Integration.Vision/  # Vision API implementations
         ├── Services/
         │   └── VisionService.cs
         ├── Clients/
         │   └── VisionClient.cs
         └── DependencyInjection.cs
         ```

      2. Abstraction Standards:
         - Define interfaces/abstract classes in Core
         - Keep abstractions focused and minimal
         - Use proper abstraction levels
         - Follow ISP (Interface Segregation)
         - Document abstraction contracts

      3. Implementation Standards:
         - Implement in provider-specific projects
         - Use IHttpClientFactory
         - Handle provider-specific logic
         - Implement retry policies
         - Use circuit breakers

      4. Configuration:
         - Use options pattern
         - Keep provider settings separate
         - Use user secrets for local dev
         - Validate configurations
         - Use proper DI registration

      5. Security & Performance:
         - Secure API keys per provider
         - Implement provider-specific caching
         - Handle rate limits per service
         - Monitor API usage
         - Implement proper logging

examples:
  - input: |
      // Bad: Implementation in Core project and wrong namespace
      namespace ServoSkull.Core.Interfaces {
          public class OpenAIClient : IOpenAIClient { }
      }

      // Good: Interface in Core Abstractions, implementation in Integration
      // ServoSkull.Core/Abstractions/Clients/IOpenAIClient.cs
      namespace ServoSkull.Core.Abstractions.Clients {
          public interface IOpenAIClient {
              Task<CompletionResponse> GenerateCompletion(CompletionRequest request);
          }
      }

      // ServoSkull.Integration.OpenAI/Clients/OpenAIClient.cs
      namespace ServoSkull.Integration.OpenAI.Clients {
          public class OpenAIClient : IOpenAIClient { }
      }
    output: "Correctly separated abstraction and implementation"

  - input: |
      // Bad: Direct configuration
      services.AddHttpClient<OpenAIClient>();

      // Good: Using extension methods
      // ServoSkull.Integration.OpenAI/DependencyInjection.cs
      public static IServiceCollection AddOpenAIServices(
          this IServiceCollection services,
          IConfiguration configuration)
      {
          services.Configure<OpenAIOptions>(
              configuration.GetSection("OpenAI"));
          
          services.AddHttpClient<IOpenAIClient, OpenAIClient>()
              .AddPolicyHandler(GetRetryPolicy())
              .AddPolicyHandler(GetCircuitBreakerPolicy());
              
          return services;
      }
    output: "Correctly implemented service registration"

metadata:
  priority: high
  version: 1.0
</rule> 